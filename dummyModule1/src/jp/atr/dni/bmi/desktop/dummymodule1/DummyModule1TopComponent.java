package jp.atr.dni.bmi.desktop.dummymodule1;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import jp.atr.dni.bmi.desktop.model.api.data.APIList;
import jp.atr.dni.bmi.desktop.model.api.AnalogChannel;
import jp.atr.dni.bmi.desktop.model.api.Channel;
import jp.atr.dni.bmi.desktop.model.api.ChannelType;
import jp.atr.dni.bmi.desktop.model.api.EventChannel;
import jp.atr.dni.bmi.desktop.model.api.NeuralSpikeChannel;
import jp.atr.dni.bmi.desktop.model.api.SegmentChannel;
import jp.atr.dni.bmi.desktop.model.api.Workspace;
import jp.atr.dni.bmi.desktop.model.api.data.NSNEventData;
import jp.atr.dni.bmi.desktop.model.api.data.NSNAnalogData;
import jp.atr.dni.bmi.desktop.model.api.data.NSNEvent;
import jp.atr.dni.bmi.desktop.model.api.data.NSNSegmentData;
import jp.atr.dni.bmi.desktop.model.api.data.NSNNeuralSpikeData;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Lookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//jp.atr.dni.bmi.desktop.dummymodule1//DummyModule1//EN",
autostore = false)
public final class DummyModule1TopComponent extends TopComponent implements PropertyChangeListener {

   // kharada 2011/05/10 Add for tutorial.
   // It is needed to create a dynamic list.
   private DefaultListModel defaultListModel;
   // kharada 2011/05/10 Add for tutorial.
   // It is needed to display.
   private Channel channel;
   private static DummyModule1TopComponent instance;
   /** path to the icon used by the component and its open action */
   static final String ICON_PATH = "jp/atr/dni/bmi/desktop/dummymodule1/face-monkey.png";
   private static final String PREFERRED_ID = "DummyModule1TopComponent";
   private Workspace workspace = Lookup.getDefault().lookup(Workspace.class);

   public DummyModule1TopComponent() {

      // kharada 2011/05/11 Add for tutorial.
      beforeInitComponents();

      initComponents();
      setName(NbBundle.getMessage(DummyModule1TopComponent.class, "CTL_DummyModule1TopComponent"));
      setToolTipText(NbBundle.getMessage(DummyModule1TopComponent.class, "HINT_DummyModule1TopComponent"));
      setIcon(ImageUtilities.loadImage(ICON_PATH, true));

      // kharada 2011/05/11 Add for tutorial.
      afterInitComponents();

   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jList1.setModel(defaultListModel);
        jList1.setValueIsAdjusting(true);
        jScrollPane3.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane3, gridBagConstraints);

        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DummyModule1TopComponent.class, "DummyModule1TopComponent.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jLabel1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DummyModule1TopComponent.class, "DummyModule1TopComponent.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jLabel2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(DummyModule1TopComponent.class, "DummyModule1TopComponent.jLabel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jLabel3, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(DummyModule1TopComponent.class, "DummyModule1TopComponent.jLabel4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jLabel4, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(DummyModule1TopComponent.class, "DummyModule1TopComponent.jLabel5.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jLabel5, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(DummyModule1TopComponent.class, "DummyModule1TopComponent.jLabel6.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jLabel6, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

   /**
    * Gets default instance. Do not use directly: reserved for *.settings files only,
    * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
    * To obtain the singleton instance, use {@link #findInstance}.
    */
   public static synchronized DummyModule1TopComponent getDefault() {
      if (instance == null) {
         instance = new DummyModule1TopComponent();
      }
      return instance;
   }

   /**
    * Obtain the DummyModule1TopComponent instance. Never call {@link #getDefault} directly!
    */
   public static synchronized DummyModule1TopComponent findInstance() {
      TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
      if (win == null) {
         Logger.getLogger(DummyModule1TopComponent.class.getName()).warning(
                 "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
         return getDefault();
      }
      if (win instanceof DummyModule1TopComponent) {
         return (DummyModule1TopComponent) win;
      }
      Logger.getLogger(DummyModule1TopComponent.class.getName()).warning(
              "There seem to be multiple components with the '" + PREFERRED_ID
              + "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
   }

   @Override
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_ALWAYS;
   }

   void writeProperties(java.util.Properties p) {
      // better to version settings since initial version as advocated at
      // http://wiki.apidesign.org/wiki/PropertyFiles
      p.setProperty("version", "1.0");
      // TODO store your settings
   }

   Object readProperties(java.util.Properties p) {
      if (instance == null) {
         instance = this;
      }
      instance.readPropertiesImpl(p);
      return instance;
   }

   private void readPropertiesImpl(java.util.Properties p) {
      String version = p.getProperty("version");
      // TODO read your settings according to their version
   }

   @Override
   protected String preferredID() {
      return PREFERRED_ID;
   }

   private void afterInitComponents() {

      // Repaint components.

      // Clear All.
      clearAllComponents();

      // Get New Channel #1.
      getNewNo1Channel();

      // Set All.
      setAllComponents();

   }

   private void beforeInitComponents() {

      // Define defaultListModel to manage list.
      defaultListModel = new DefaultListModel();
   }

   @Override
   public void componentOpened() {

      // Register this as propertyChangeListener of Workspace.

      // Add listener to the workspace to call propertyChange.
      workspace.addPropertyChangeListener(this);

      // then this module can receive events on Workspace.

   }

   @Override
   public void componentClosed() {

      // Unregister.

      // Remove listener from the workspace not to call propertyChange.
      workspace.removePropertyChangeListener(this);

      // then this module can not receive anymore.

   }

   @Override
   public void propertyChange(PropertyChangeEvent pce) {

      // Repaint components.

      // Clear All.
      clearAllComponents();

      // Get New Channel #1.
      getNewNo1Channel();

      // Set All.
      setAllComponents();

   }

   private void clearAllComponents() {

      // Clear All Components.
      jLabel3.setText("");
      jLabel5.setText("");
      defaultListModel.removeAllElements();
   }

   private void setAllComponents() {

      // Set All Components if channel is not null.
      if (this.channel == null) {
         // Channel doesn't exist.

         // Show Dialog.
         JOptionPane.showMessageDialog(null, "There is nothing to display. Add channels to the Workspace.", this.getName(), JOptionPane.INFORMATION_MESSAGE);

         return;
      }

      jLabel3.setText(this.channel.getLabel());
      jLabel5.setText(this.channel.getType().toString());

      setTextToList();


   }

   private void getNewNo1Channel() {
      // Get New #1 channel from Workspace.
      if (workspace.numChannels() < 1) {
         this.channel = null;
      } else {
         this.channel = workspace.getChannel(0);
      }
   }

   private void setTextToList() {

      if (this.channel.getType() == ChannelType.ANALOG) {
         AnalogChannel analogChannel = (AnalogChannel) channel;

         NSNAnalogData timeData = analogChannel.getData();

         ArrayList<APIList<Double>> allValues = timeData.getValues();
         ArrayList<Double> timeStamps = timeData.getTimeStamps();

         defaultListModel.addElement("------- TS_AND_VAL Data --------");

         for (int ii = 0; ii < allValues.size(); ii++) {

            // Display timestamp.
            defaultListModel.addElement("------ timestamp ------");
            defaultListModel.addElement(timeStamps.get(ii));

            // Display values.
            defaultListModel.addElement("------- values --------");
            APIList<Double> oneRow = allValues.get(ii);
            for (int jj = 0; jj < oneRow.size(); jj++) {
               defaultListModel.addElement(oneRow.get(jj));
            }
            defaultListModel.addElement("-----------------------");
         }
      } else if (this.channel.getType() == ChannelType.NEURAL_SPIKE) {
         NeuralSpikeChannel spikeChannel = (NeuralSpikeChannel) channel;
         NSNNeuralSpikeData timeData = spikeChannel.getData();

         APIList<Double> timeStamps = timeData.getTimeStamps();

         defaultListModel.addElement("------- TIMESTAMP Data --------");

         for (int ii = 0; ii < timeStamps.size(); ii++) {

            // Display timestamps.
            defaultListModel.addElement("------ timestamp ------");
            defaultListModel.addElement(timeStamps.get(ii));
            defaultListModel.addElement("-----------------------");
         }
      } else if (this.channel.getType() == ChannelType.SEGMENT) {

         SegmentChannel segChannel = (SegmentChannel) channel;
         NSNSegmentData timeValIdData = segChannel.getData();

         APIList<APIList<Double>> values = timeValIdData.getValues();
         APIList<Integer> unitIDs = timeValIdData.getUnitIds();
         APIList<Double> timeStamps = timeValIdData.getTimeStamps();

         defaultListModel.addElement("------- TS_AND_VAL_AND_ID Data --------");

         for (int ii = 0; ii < timeStamps.size(); ii++) {

            // Display timestamp.
            defaultListModel.addElement("------ timestamp ------");
            defaultListModel.addElement(timeStamps.get(ii));

            // Display unitID.
            defaultListModel.addElement("------ unitID ---------");
            defaultListModel.addElement(unitIDs.get(ii));

            // Display values.
            defaultListModel.addElement("------- values --------");
            APIList<Double> oneRow = values.get(ii);
            for (int jj = 0; jj < oneRow.size(); jj++) {
               defaultListModel.addElement(oneRow.get(jj));
            }
            defaultListModel.addElement("-----------------------");
         }
      } else if (this.channel.getType() == ChannelType.EVENT) {

         EventChannel evtChannel = (EventChannel) channel;
         NSNEventData timeLabelData = evtChannel.getData();

         APIList<NSNEvent> events = timeLabelData.getEvents();

         defaultListModel.addElement("------- TS_AND_LABEL Data --------");

         for (int i = 0; i < events.size(); i++) {

            // Display timestamp.
            defaultListModel.addElement("------ timestamp ------");
            defaultListModel.addElement(events.get(i).getTimestamp());
            defaultListModel.addElement("------ value ----------");
            defaultListModel.addElement(events.get(i).getValue());
            defaultListModel.addElement("-----------------------");
         }
      }
   }
}
