/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jp.atr.dni.bmi.desktop.workspace;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import jp.atr.dni.bmi.desktop.model.Channel;
import jp.atr.dni.bmi.desktop.model.Workspace;

public final class CreateNewFileVisualPanel3 extends JPanel {

    // Define Lists.
    DefaultListModel unSelectedChannelList;
    DefaultListModel selectedChannelList;

    /** Creates new form CreateNewFileVisualPanel3 */
    public CreateNewFileVisualPanel3() {
        beforeInitComponents();
        initComponents();
        afterInitComponents();
    }

    @Override
    public String getName() {
        return "Choose Data.";
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(CreateNewFileVisualPanel3.class, "CreateNewFileVisualPanel3.jPanel1.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP)); // NOI18N

        jList1.setModel(unSelectedChannelList);
        jScrollPane1.setViewportView(jList1);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(CreateNewFileVisualPanel3.class, "CreateNewFileVisualPanel3.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(CreateNewFileVisualPanel3.class, "CreateNewFileVisualPanel3.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(CreateNewFileVisualPanel3.class, "CreateNewFileVisualPanel3.jPanel2.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP)); // NOI18N

        jList2.setModel(selectedChannelList);
        jScrollPane2.setViewportView(jList2);

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(CreateNewFileVisualPanel3.class, "CreateNewFileVisualPanel3.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(CreateNewFileVisualPanel3.class, "CreateNewFileVisualPanel3.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Set all channels as Selected.
        if (this.unSelectedChannelList.isEmpty()) {
            return;
        }

        ArrayList<Channel> tmpChannelList = new ArrayList<Channel>();
        for (int ii = 0; ii < this.unSelectedChannelList.getSize(); ii++) {
            tmpChannelList.add((Channel) this.unSelectedChannelList.getElementAt(ii));
        }

        for (int jj = 0; jj < tmpChannelList.size(); jj++) {
            this.moveChannelToSelected(tmpChannelList.get(jj));
        }

        jList1.repaint();
        jList2.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Set chosen channel as Selected.
        Object[] chosen = jList1.getSelectedValues();
        if (chosen == null) {
            // Any channel is not chosen.
            return;
        }

        for (int ii = 0; ii < chosen.length; ii++) {
            Channel ch = (Channel) chosen[ii];
            this.moveChannelToSelected(ch);
        }

        jList1.repaint();
        jList2.repaint();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Set chosen channel as Unselected.
        Object[] chosen = jList2.getSelectedValues();
        if (chosen == null) {
            // Any channel is not chosen.
            return;
        }

        for (int ii = 0; ii < chosen.length; ii++) {
            Channel ch = (Channel) chosen[ii];
            this.moveChannelToUnSelected(ch);
        }

        jList1.repaint();
        jList2.repaint();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Set all channels as Unselected.
        if (this.selectedChannelList.isEmpty()) {
            return;
        }

        ArrayList<Channel> tmpChannelList = new ArrayList<Channel>();
        for (int ii = 0; ii < this.selectedChannelList.getSize(); ii++) {
            tmpChannelList.add((Channel) this.selectedChannelList.getElementAt(ii));
        }

        for (int jj = 0; jj < tmpChannelList.size(); jj++) {
            this.moveChannelToUnSelected(tmpChannelList.get(jj));
        }

        jList1.repaint();
        jList2.repaint();
    }//GEN-LAST:event_jButton4ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void beforeInitComponents() {
        this.unSelectedChannelList = new DefaultListModel();
        this.selectedChannelList = new DefaultListModel();
    }

    public void afterInitComponents() {
        // Remove all (remove all elements.)
        this.unSelectedChannelList.removeAllElements();
        this.selectedChannelList.removeAllElements();
        // Add channels to unSelectedChannelList.
        ArrayList<Channel> channels = Workspace.getChannels();
        for (int ii = 0; ii < channels.size(); ii++) {
            this.unSelectedChannelList.add(ii, channels.get(ii));
        }
    }
    private void moveChannelToSelected(Channel ch) {
        if (this.selectedChannelList.isEmpty()) {
            // Add to First.
            this.selectedChannelList.addElement(ch);
        } else {
            int selectedChannelListSize = this.selectedChannelList.getSize();
            for (int ii = 0; ii < selectedChannelListSize; ii++) {
                Channel search = (Channel) this.selectedChannelList.getElementAt(ii);
                int diff = ch.getChannelID() - search.getChannelID();

                if (diff < 0) {
                    // Insert at ii.
                    this.selectedChannelList.insertElementAt(ch, ii);
                    break;
                }
                if (selectedChannelListSize <= ii + 1) {
                    // Add to Last.
                    this.selectedChannelList.addElement(ch);
                    break;
                }
            }
        }
        this.unSelectedChannelList.removeElement(ch);
    }

    private void moveChannelToUnSelected(Channel ch) {
        if (this.unSelectedChannelList.isEmpty()) {
            // Add to First.
            this.unSelectedChannelList.addElement(ch);
        } else {
            int unSelectedChannelListSize = this.unSelectedChannelList.getSize();
            for (int ii = 0; ii < unSelectedChannelListSize; ii++) {
                Channel search = (Channel) this.unSelectedChannelList.getElementAt(ii);
                int diff = ch.getChannelID() - search.getChannelID();

                if (diff < 0) {
                    // Insert at ii.
                    this.unSelectedChannelList.insertElementAt(ch, ii);
                    break;
                }
                if (unSelectedChannelListSize <= ii + 1) {
                    // Add to Last.
                    this.unSelectedChannelList.addElement(ch);
                    break;
                }
            }
        }
        this.selectedChannelList.removeElement(ch);
    }

    ArrayList<Channel> getSelectedChannels() {

        ArrayList<Channel> chs = new ArrayList<Channel>();
        int size = this.selectedChannelList.size();
        for (int ii=0; ii<size; ii++){
            Channel ch = (Channel)this.selectedChannelList.getElementAt(ii);
            chs.add(ch);
        }
        return chs;
    }
}
