/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChannelPropertyEditor.java
 *
 * Created on 2011/07/14, 15:10:14
 */
package jp.atr.dni.bmi.desktop.workspace;

import java.awt.CardLayout;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import jp.atr.dni.bmi.desktop.model.Channel;
import jp.atr.dni.bmi.desktop.model.ChannelType;
import jp.atr.dni.bmi.desktop.model.Workspace;
import jp.atr.dni.bmi.desktop.model.utils.DoubleInputVerifierForJTextField;
import jp.atr.dni.bmi.desktop.model.utils.IntegerInputVerifierForJTextField;
import jp.atr.dni.bmi.desktop.model.utils.UnsignedIntegerInputVerifierForJTextField;
import jp.atr.dni.bmi.desktop.neuroshareutils.AnalogInfo;
import jp.atr.dni.bmi.desktop.neuroshareutils.Entity;
import jp.atr.dni.bmi.desktop.neuroshareutils.EntityInfo;
import jp.atr.dni.bmi.desktop.neuroshareutils.EventInfo;
import jp.atr.dni.bmi.desktop.neuroshareutils.NeuralInfo;
import jp.atr.dni.bmi.desktop.neuroshareutils.SegmentInfo;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;

/**
 *
 * @author kharada
 */
public class ChannelPropertyEditor extends javax.swing.JPanel implements ActionListener {

    DialogDescriptor dialogDescriptor;
    Dialog dialog;
    Channel oldChannel; // for search.
    Channel channel;
    CardLayout layout;

    /** Creates new form ChannelPropertyEditor */
    public ChannelPropertyEditor(Channel channel) {
        beforeInitComponents(channel);
        initComponents();
        afterInitComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        eventChannelLabel = new javax.swing.JTextField();
        eventChannelType = new javax.swing.JTextField();
        eventSourceFilePath = new javax.swing.JTextField();
        eventCSVDesc = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        analogChannelLabel = new javax.swing.JTextField();
        analogChannelType = new javax.swing.JTextField();
        analogSourceFilePath = new javax.swing.JTextField();
        analogSamplingRate = new javax.swing.JTextField();
        analogMinVal = new javax.swing.JTextField();
        analogMaxVal = new javax.swing.JTextField();
        analogUnits = new javax.swing.JTextField();
        analogResolution = new javax.swing.JTextField();
        analogLocationX = new javax.swing.JTextField();
        analogLocationY = new javax.swing.JTextField();
        analogLocationZ = new javax.swing.JTextField();
        analogLocationUser = new javax.swing.JTextField();
        analogHighFreqCorner = new javax.swing.JTextField();
        analogHighFreqOrder = new javax.swing.JTextField();
        analogHighFilterType = new javax.swing.JTextField();
        analogLowFreqCorner = new javax.swing.JTextField();
        analogLowFreqOrder = new javax.swing.JTextField();
        analogLowFilterType = new javax.swing.JTextField();
        analogProbeInfo = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.CardLayout());

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel2.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel3.text")); // NOI18N

        jLabel8.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel8.text")); // NOI18N

        eventChannelLabel.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.eventChannelLabel.text")); // NOI18N
        eventChannelLabel.setMinimumSize(new java.awt.Dimension(20, 19));
        eventChannelLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventChannelLabelActionPerformed(evt);
            }
        });

        eventChannelType.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.eventChannelType.text")); // NOI18N
        eventChannelType.setEnabled(false);
        eventChannelType.setPreferredSize(new java.awt.Dimension(20, 19));

        eventSourceFilePath.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.eventSourceFilePath.text")); // NOI18N
        eventSourceFilePath.setEnabled(false);
        eventSourceFilePath.setMinimumSize(new java.awt.Dimension(20, 19));
        eventSourceFilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventSourceFilePathActionPerformed(evt);
            }
        });

        eventCSVDesc.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.eventCSVDesc.text")); // NOI18N
        eventCSVDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventCSVDescActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventCSVDesc, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addComponent(eventChannelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addComponent(eventChannelType, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addComponent(eventSourceFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(eventChannelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(eventChannelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(eventSourceFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventCSVDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(385, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel6, "card2");

        jLabel10.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel10.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel4.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel5.text")); // NOI18N

        jLabel6.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel6.text")); // NOI18N

        jLabel7.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel7.text")); // NOI18N

        jLabel9.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel9.text")); // NOI18N

        jLabel11.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel11.text")); // NOI18N

        jLabel12.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel12.text")); // NOI18N

        jLabel13.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel13.text")); // NOI18N

        jLabel14.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel14.text")); // NOI18N

        jLabel15.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel15.text")); // NOI18N

        jLabel16.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel16.text")); // NOI18N

        jLabel17.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel17.text")); // NOI18N

        jLabel18.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel18.text")); // NOI18N

        jLabel19.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel19.text")); // NOI18N

        jLabel20.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel20.text")); // NOI18N

        jLabel21.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel21.text")); // NOI18N

        jLabel22.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel22.text")); // NOI18N

        jLabel23.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel23.text")); // NOI18N

        analogChannelLabel.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogChannelLabel.text")); // NOI18N

        analogChannelType.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogChannelType.text")); // NOI18N
        analogChannelType.setEnabled(false);

        analogSourceFilePath.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogSourceFilePath.text")); // NOI18N
        analogSourceFilePath.setEnabled(false);
        analogSourceFilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analogSourceFilePathActionPerformed(evt);
            }
        });

        analogSamplingRate.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogSamplingRate.text")); // NOI18N
        analogSamplingRate.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogMinVal.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogMinVal.text")); // NOI18N
        analogMinVal.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogMaxVal.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogMaxVal.text")); // NOI18N
        analogMaxVal.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogUnits.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogUnits.text")); // NOI18N

        analogResolution.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogResolution.text")); // NOI18N
        analogResolution.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogLocationX.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLocationX.text")); // NOI18N
        analogLocationX.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogLocationY.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLocationY.text")); // NOI18N
        analogLocationY.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogLocationZ.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLocationZ.text")); // NOI18N
        analogLocationZ.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogLocationUser.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLocationUser.text")); // NOI18N
        analogLocationUser.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogHighFreqCorner.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogHighFreqCorner.text")); // NOI18N
        analogHighFreqCorner.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogHighFreqOrder.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogHighFreqOrder.text")); // NOI18N
        analogHighFreqOrder.setInputVerifier(new UnsignedIntegerInputVerifierForJTextField());

        analogHighFilterType.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogHighFilterType.text")); // NOI18N

        analogLowFreqCorner.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLowFreqCorner.text")); // NOI18N
        analogLowFreqCorner.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogLowFreqOrder.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLowFreqOrder.text")); // NOI18N
        analogLowFreqOrder.setInputVerifier(new UnsignedIntegerInputVerifierForJTextField());

        analogLowFilterType.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLowFilterType.text")); // NOI18N

        analogProbeInfo.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogProbeInfo.text")); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel10)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(analogProbeInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLowFilterType, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLowFreqOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLowFreqCorner, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogHighFilterType, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogHighFreqOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogHighFreqCorner, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLocationUser, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLocationZ, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLocationY, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLocationX, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogResolution, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogUnits, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogMaxVal, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogMinVal, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogChannelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogChannelType, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogSourceFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogSamplingRate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(analogChannelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(analogChannelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(analogSourceFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(analogSamplingRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(analogMinVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(analogMaxVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(analogUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(analogResolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(analogLocationX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(analogLocationY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(analogLocationZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(analogLocationUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(analogHighFreqCorner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(analogHighFreqOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(analogHighFilterType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(analogLowFreqCorner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(analogLowFreqOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(analogLowFilterType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(analogProbeInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel7, "card3");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void eventChannelLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventChannelLabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventChannelLabelActionPerformed

    private void eventCSVDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventCSVDescActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventCSVDescActionPerformed

    private void eventSourceFilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventSourceFilePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventSourceFilePathActionPerformed

    private void analogSourceFilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analogSourceFilePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_analogSourceFilePathActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField analogChannelLabel;
    private javax.swing.JTextField analogChannelType;
    private javax.swing.JTextField analogHighFilterType;
    private javax.swing.JTextField analogHighFreqCorner;
    private javax.swing.JTextField analogHighFreqOrder;
    private javax.swing.JTextField analogLocationUser;
    private javax.swing.JTextField analogLocationX;
    private javax.swing.JTextField analogLocationY;
    private javax.swing.JTextField analogLocationZ;
    private javax.swing.JTextField analogLowFilterType;
    private javax.swing.JTextField analogLowFreqCorner;
    private javax.swing.JTextField analogLowFreqOrder;
    private javax.swing.JTextField analogMaxVal;
    private javax.swing.JTextField analogMinVal;
    private javax.swing.JTextField analogProbeInfo;
    private javax.swing.JTextField analogResolution;
    private javax.swing.JTextField analogSamplingRate;
    private javax.swing.JTextField analogSourceFilePath;
    private javax.swing.JTextField analogUnits;
    private javax.swing.JTextField eventCSVDesc;
    private javax.swing.JTextField eventChannelLabel;
    private javax.swing.JTextField eventChannelType;
    private javax.swing.JTextField eventSourceFilePath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        // OKボタン、キャンセルボタン処理。

        if (dialogDescriptor.getValue() == DialogDescriptor.OK_OPTION) {
            // OK : overwrite the channel.
            // 1. save modified channel information.
            // 2. update channel.            

            // 1. save the channel.
            if (!saveChannel()) {
                JOptionPane.showConfirmDialog(null, "Save Error!", "Save Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // 2. update channel header.
            Workspace.updateChannelHeader(oldChannel, channel);

        }

    }

    private void beforeInitComponents(Channel channel) {
        // Set Data.
        this.oldChannel = channel;
        this.channel = channel;
    }

    private void afterInitComponents() {
        layout = (CardLayout) jPanel1.getLayout();

        // Display Base Header.
        dialogDescriptor = new DialogDescriptor(this, "Channel Editor", true, this);

        // Display Other Header.
        if (channel.getChannelType().equals(ChannelType.TS_AND_LABEL)) {
            // Event Entity Header.
            EventInfo ei = (EventInfo) (channel.getEntity());

            layout.show(jPanel1, "card2");
            eventChannelLabel.setText(channel.getLabel());
            eventChannelType.setText(channel.getChannelType().toString());
            eventSourceFilePath.setText(channel.getSourceFilePath());
            eventCSVDesc.setText(ei.getCsvDesc());

        }
        if (channel.getChannelType().equals(ChannelType.TS_AND_VAL)) {
            // Analog Entity Header.
            AnalogInfo ai = (AnalogInfo) (channel.getEntity());

            // UC.
            layout.show(jPanel1, "card3");
            analogChannelLabel.setText(channel.getLabel());
            analogChannelType.setText(channel.getChannelType().toString());
            analogSourceFilePath.setText(channel.getSourceFilePath());
            analogSamplingRate.setText(((Double) ai.getSampleRate()).toString());
            analogMinVal.setText(((Double) ai.getMinVal()).toString());
            analogMaxVal.setText(((Double) ai.getMaxVal()).toString());
            analogUnits.setText(ai.getUnits());
            analogResolution.setText(((Double) ai.getResolution()).toString());
            analogLocationX.setText(((Double) ai.getLocationX()).toString());
            analogLocationY.setText(((Double) ai.getLocationY()).toString());
            analogLocationZ.setText(((Double) ai.getLocationZ()).toString());
            analogLocationUser.setText(((Double) ai.getLocationUser()).toString());
            analogHighFreqCorner.setText(((Double) ai.getHighFreqCorner()).toString());
            analogHighFreqOrder.setText(((Long) ai.getHighFreqOrder()).toString());
            analogHighFilterType.setText(ai.getHighFilterType());
            analogLowFreqCorner.setText(((Double) ai.getLowFreqCorner()).toString());
            analogLowFreqOrder.setText(((Long) ai.getLowFreqOrder()).toString());
            analogLowFilterType.setText(ai.getLowFilterType());
            analogProbeInfo.setText(ai.getProbeInfo());

        }
        if (channel.getChannelType().equals(ChannelType.TS_AND_VAL_AND_ID)) {
            // Segment Entity Header.
            SegmentInfo ai = (SegmentInfo) (channel.getEntity());

            // UC.
        }
        if (channel.getChannelType().equals(ChannelType.TIMESTAMP)) {
            // Neural Event Entity Header.
            NeuralInfo ai = (NeuralInfo) (channel.getEntity());
            // UC.
        }

    }

    public void showDialog() {
        this.dialog = DialogDisplayer.getDefault().createDialog(this.dialogDescriptor);
        this.dialog.setModal(true);
        this.dialog.pack();
        this.dialog.setVisible(true);
    }

    private boolean saveChannel() {

        // cheker is needed to verify input.
        boolean checker = true;
        if (this.channel.getChannelType() == ChannelType.TS_AND_LABEL) {
            // EVENT Entity.

            // Check Values.
            // Nothing.

            // Set Values.
            this.channel.setLabel(eventChannelLabel.getText());

            Entity edittedEntity = this.channel.getEntity();
            EntityInfo ei = edittedEntity.getEntityInfo();
            ei.setEntityLabel(analogChannelLabel.getText());
            edittedEntity.setEntityInfo(ei);

            EventInfo evi = (EventInfo) edittedEntity;
            evi.setCsvDesc(eventCSVDesc.getText());

            this.channel.setEntity((Entity)evi);

        } else if (this.channel.getChannelType() == ChannelType.TS_AND_VAL) {
            // ANALOG Entity.

            // Check Values.
            checker &= isDouble(analogSamplingRate.getText());
            checker &= isDouble(analogMinVal.getText());
            checker &= isDouble(analogMaxVal.getText());
            checker &= isDouble(analogResolution.getText());
            checker &= isDouble(analogLocationX.getText());
            checker &= isDouble(analogLocationY.getText());
            checker &= isDouble(analogLocationZ.getText());
            checker &= isDouble(analogLocationUser.getText());
            checker &= isDouble(analogHighFreqCorner.getText());
            checker &= isUnsignedInteger(analogHighFreqOrder.getText());
            checker &= isDouble(analogLowFreqCorner.getText());
            checker &= isUnsignedInteger(analogLowFreqOrder.getText());
            if (!checker) {
                return checker;
            }

            // Set Values.
            this.channel.setLabel(analogChannelLabel.getText());

            Entity edittedEntity = this.channel.getEntity();
            EntityInfo ei = edittedEntity.getEntityInfo();
            ei.setEntityLabel(analogChannelLabel.getText());
            edittedEntity.setEntityInfo(ei);

            AnalogInfo ai = (AnalogInfo) edittedEntity;
            ai.setSampleRate(Double.parseDouble(analogSamplingRate.getText()));
            ai.setMinVal(Double.parseDouble(analogMinVal.getText()));
            ai.setMaxVal(Double.parseDouble(analogMaxVal.getText()));
            ai.setUnits(analogUnits.getText());
            ai.setResolution(Double.parseDouble(analogResolution.getText()));
            ai.setLocationX(Double.parseDouble(analogLocationX.getText()));
            ai.setLocationY(Double.parseDouble(analogLocationY.getText()));
            ai.setLocationZ(Double.parseDouble(analogLocationZ.getText()));
            ai.setLocationUser(Double.parseDouble(analogLocationUser.getText()));
            ai.setHighFreqCorner(Double.parseDouble(analogHighFreqCorner.getText()));
            ai.setHighFreqOrder(Long.parseLong(analogHighFreqOrder.getText()));
            ai.setHighFilterType(analogHighFilterType.getText());
            ai.setLowFreqCorner(Double.parseDouble(analogLowFreqCorner.getText()));
            ai.setLowFreqOrder(Long.parseLong(analogLowFreqOrder.getText()));
            ai.setLowFilterType(analogLowFilterType.getText());
            ai.setProbeInfo(analogProbeInfo.getText());

            this.channel.setEntity((Entity)ai);


        } else if (this.channel.getChannelType() == ChannelType.TS_AND_VAL_AND_ID) {
            // SEGMENT Entity.
        } else if (this.channel.getChannelType() == ChannelType.TIMESTAMP) {
            // NEURALEVENT Entity.
        } else {
            // UNKNOWN
            checker = false;
        }

        return checker;
    }

    private boolean isDouble(String txt) {
        try {
            Double.parseDouble(txt);
        } catch (NumberFormatException numberFormatException) {
            return false;
        }
        return true;
    }

    private boolean isInteger(String txt) {
        try {
            Integer.parseInt(txt);
        } catch (NumberFormatException numberFormatException) {
            return false;
        }
        return true;
    }

    private boolean isUnsignedInteger(String txt) {
        try {
            int value = Integer.parseInt(txt);
            if (value < 0) {
                return false;
            }
        } catch (NumberFormatException numberFormatException) {
            return false;
        }
        return true;
    }
}
