/*
 * ChannelPropertyEditor.java
 *
 * Created on 2011/07/14, 15:10:14
 */
package jp.atr.dni.bmi.desktop.workspace;

import java.awt.CardLayout;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import jp.atr.dni.bmi.desktop.model.api.Channel;
import jp.atr.dni.bmi.desktop.model.utils.DoubleInputVerifierForJTextField;
import jp.atr.dni.bmi.desktop.model.utils.UnsignedIntegerInputVerifierForJTextField;
import jp.atr.dni.bmi.desktop.neuroshareutils.AnalogInfo;
import jp.atr.dni.bmi.desktop.neuroshareutils.Entity;
import jp.atr.dni.bmi.desktop.neuroshareutils.EntityInfo;
import jp.atr.dni.bmi.desktop.neuroshareutils.EventInfo;
import jp.atr.dni.bmi.desktop.neuroshareutils.NeuralInfo;
import jp.atr.dni.bmi.desktop.neuroshareutils.SegmentInfo;
import jp.atr.dni.bmi.desktop.neuroshareutils.SegmentSourceInfo;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;

/**
 *
 * @author kharada
 */
public class ChannelPropertyEditor extends javax.swing.JPanel implements ActionListener {

    DialogDescriptor dialogDescriptor;
    Dialog dialog;
    Channel oldChannel; // for search.
    Channel channel;
    CardLayout layout;

    /** Creates new form ChannelPropertyEditor */
    public ChannelPropertyEditor(Channel channel) {
        beforeInitComponents(channel);
        initComponents();
        afterInitComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        eventPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        eventChannelLabel = new javax.swing.JTextField();
        eventChannelType = new javax.swing.JTextField();
        eventSourceFile = new javax.swing.JTextField();
        eventCSVDesc = new javax.swing.JTextField();
        analogPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        analogChannelLabel = new javax.swing.JTextField();
        analogChannelType = new javax.swing.JTextField();
        analogSourceFile = new javax.swing.JTextField();
        analogSamplingRate = new javax.swing.JTextField();
        analogMinVal = new javax.swing.JTextField();
        analogMaxVal = new javax.swing.JTextField();
        analogUnits = new javax.swing.JTextField();
        analogResolution = new javax.swing.JTextField();
        analogLocationX = new javax.swing.JTextField();
        analogLocationY = new javax.swing.JTextField();
        analogLocationZ = new javax.swing.JTextField();
        analogLocationUser = new javax.swing.JTextField();
        analogHighFreqCorner = new javax.swing.JTextField();
        analogHighFreqOrder = new javax.swing.JTextField();
        analogHighFilterType = new javax.swing.JTextField();
        analogLowFreqCorner = new javax.swing.JTextField();
        analogLowFreqOrder = new javax.swing.JTextField();
        analogLowFilterType = new javax.swing.JTextField();
        analogProbeInfo = new javax.swing.JTextField();
        segmentPanel = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        segmentChannelLabel = new javax.swing.JTextField();
        segmentChannelType = new javax.swing.JTextField();
        segmentSourceFile = new javax.swing.JTextField();
        segmentSampleRate = new javax.swing.JTextField();
        segmentUnit = new javax.swing.JTextField();
        segmentMinVal = new javax.swing.JTextField();
        segmentMaxVal = new javax.swing.JTextField();
        segmentResolution = new javax.swing.JTextField();
        segmentSubSampleShift = new javax.swing.JTextField();
        segmentLocationX = new javax.swing.JTextField();
        segmentLocationY = new javax.swing.JTextField();
        segmentLocationZ = new javax.swing.JTextField();
        segmentLocationUser = new javax.swing.JTextField();
        segmentHighFreqCorner = new javax.swing.JTextField();
        segmentHighFreqOrder = new javax.swing.JTextField();
        segmentHighFilterType = new javax.swing.JTextField();
        segmentLowFreqCorner = new javax.swing.JTextField();
        segmentLowFreqOrder = new javax.swing.JTextField();
        segmentLowFilterType = new javax.swing.JTextField();
        segmentProbeInfo = new javax.swing.JTextField();
        neuraleventPanel = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        neuralChannelLabel = new javax.swing.JTextField();
        neuralChannelType = new javax.swing.JTextField();
        neuralSourceFile = new javax.swing.JTextField();
        neuralSourceEntityID = new javax.swing.JTextField();
        neuralSourceUnitID = new javax.swing.JTextField();
        neuralProbeInfo = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.CardLayout());

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel2.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel3.text")); // NOI18N

        jLabel8.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel8.text")); // NOI18N

        eventChannelLabel.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.eventChannelLabel.text")); // NOI18N
        eventChannelLabel.setMinimumSize(new java.awt.Dimension(20, 19));

        eventChannelType.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.eventChannelType.text")); // NOI18N
        eventChannelType.setEnabled(false);
        eventChannelType.setPreferredSize(new java.awt.Dimension(20, 19));

        eventSourceFile.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.eventSourceFile.text")); // NOI18N
        eventSourceFile.setEnabled(false);
        eventSourceFile.setMinimumSize(new java.awt.Dimension(20, 19));

        eventCSVDesc.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.eventCSVDesc.text")); // NOI18N

        javax.swing.GroupLayout eventPanelLayout = new javax.swing.GroupLayout(eventPanel);
        eventPanel.setLayout(eventPanelLayout);
        eventPanelLayout.setHorizontalGroup(
            eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventCSVDesc, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                    .addComponent(eventChannelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                    .addComponent(eventChannelType, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                    .addComponent(eventSourceFile, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE))
                .addContainerGap())
        );
        eventPanelLayout.setVerticalGroup(
            eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(eventChannelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(eventChannelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(eventSourceFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(eventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventCSVDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(410, Short.MAX_VALUE))
        );

        jPanel1.add(eventPanel, "card2");

        jLabel10.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel10.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel4.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel5.text")); // NOI18N

        jLabel6.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel6.text")); // NOI18N

        jLabel7.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel7.text")); // NOI18N

        jLabel9.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel9.text")); // NOI18N

        jLabel11.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel11.text")); // NOI18N

        jLabel12.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel12.text")); // NOI18N

        jLabel13.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel13.text")); // NOI18N

        jLabel14.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel14.text")); // NOI18N

        jLabel15.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel15.text")); // NOI18N

        jLabel16.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel16.text")); // NOI18N

        jLabel17.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel17.text")); // NOI18N

        jLabel18.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel18.text")); // NOI18N

        jLabel19.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel19.text")); // NOI18N

        jLabel20.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel20.text")); // NOI18N

        jLabel21.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel21.text")); // NOI18N

        jLabel22.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel22.text")); // NOI18N

        jLabel23.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel23.text")); // NOI18N

        analogChannelLabel.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogChannelLabel.text")); // NOI18N

        analogChannelType.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogChannelType.text")); // NOI18N
        analogChannelType.setEnabled(false);

        analogSourceFile.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogSourceFile.text")); // NOI18N
        analogSourceFile.setEnabled(false);

        analogSamplingRate.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogSamplingRate.text")); // NOI18N
        analogSamplingRate.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogMinVal.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogMinVal.text")); // NOI18N
        analogMinVal.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogMaxVal.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogMaxVal.text")); // NOI18N
        analogMaxVal.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogUnits.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogUnits.text")); // NOI18N

        analogResolution.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogResolution.text")); // NOI18N
        analogResolution.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogLocationX.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLocationX.text")); // NOI18N
        analogLocationX.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogLocationY.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLocationY.text")); // NOI18N
        analogLocationY.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogLocationZ.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLocationZ.text")); // NOI18N
        analogLocationZ.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogLocationUser.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLocationUser.text")); // NOI18N
        analogLocationUser.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogHighFreqCorner.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogHighFreqCorner.text")); // NOI18N
        analogHighFreqCorner.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogHighFreqOrder.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogHighFreqOrder.text")); // NOI18N
        analogHighFreqOrder.setInputVerifier(new UnsignedIntegerInputVerifierForJTextField());

        analogHighFilterType.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogHighFilterType.text")); // NOI18N

        analogLowFreqCorner.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLowFreqCorner.text")); // NOI18N
        analogLowFreqCorner.setInputVerifier(new DoubleInputVerifierForJTextField());

        analogLowFreqOrder.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLowFreqOrder.text")); // NOI18N
        analogLowFreqOrder.setInputVerifier(new UnsignedIntegerInputVerifierForJTextField());

        analogLowFilterType.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogLowFilterType.text")); // NOI18N

        analogProbeInfo.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.analogProbeInfo.text")); // NOI18N

        javax.swing.GroupLayout analogPanelLayout = new javax.swing.GroupLayout(analogPanel);
        analogPanel.setLayout(analogPanelLayout);
        analogPanelLayout.setHorizontalGroup(
            analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel10)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(analogProbeInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLowFilterType, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLowFreqOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLowFreqCorner, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogHighFilterType, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogHighFreqOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogHighFreqCorner, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLocationUser, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLocationZ, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLocationY, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogLocationX, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogResolution, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogUnits, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogMaxVal, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogMinVal, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogChannelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogChannelType, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogSourceFile, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(analogSamplingRate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                .addContainerGap())
        );
        analogPanelLayout.setVerticalGroup(
            analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(analogChannelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(analogChannelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(analogSourceFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(analogSamplingRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(analogMinVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(analogMaxVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(analogUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(analogResolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(analogLocationX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(analogLocationY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(analogLocationZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(analogLocationUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(analogHighFreqCorner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(analogHighFreqOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(analogHighFilterType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(analogLowFreqCorner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(analogLowFreqOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(analogLowFilterType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(analogProbeInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel1.add(analogPanel, "card3");

        jLabel24.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel24.text")); // NOI18N

        jLabel25.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel25.text")); // NOI18N

        jLabel26.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel26.text")); // NOI18N

        jLabel27.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel27.text")); // NOI18N

        jLabel28.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel28.text")); // NOI18N

        jLabel29.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel29.text")); // NOI18N

        jLabel30.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel30.text")); // NOI18N

        jLabel31.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel31.text")); // NOI18N

        jLabel32.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel32.text")); // NOI18N

        jLabel33.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel33.text")); // NOI18N

        jLabel34.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel34.text")); // NOI18N

        jLabel35.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel35.text")); // NOI18N

        jLabel36.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel36.text")); // NOI18N

        jLabel37.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel37.text")); // NOI18N

        jLabel38.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel38.text")); // NOI18N

        jLabel39.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel39.text")); // NOI18N

        jLabel40.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel40.text")); // NOI18N

        jLabel41.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel41.text")); // NOI18N

        jLabel42.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel42.text")); // NOI18N

        jLabel43.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel43.text")); // NOI18N

        segmentChannelLabel.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentChannelLabel.text")); // NOI18N

        segmentChannelType.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentChannelType.text")); // NOI18N
        segmentChannelType.setEnabled(false);

        segmentSourceFile.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentSourceFile.text")); // NOI18N
        segmentSourceFile.setEnabled(false);

        segmentSampleRate.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentSampleRate.text")); // NOI18N
        segmentSampleRate.setInputVerifier(new DoubleInputVerifierForJTextField());

        segmentUnit.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentUnit.text")); // NOI18N

        segmentMinVal.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentMinVal.text")); // NOI18N
        segmentMinVal.setInputVerifier(new DoubleInputVerifierForJTextField());

        segmentMaxVal.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentMaxVal.text")); // NOI18N
        segmentMaxVal.setInputVerifier(new DoubleInputVerifierForJTextField());

        segmentResolution.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentResolution.text")); // NOI18N
        segmentResolution.setInputVerifier(new DoubleInputVerifierForJTextField());

        segmentSubSampleShift.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentSubSampleShift.text")); // NOI18N
        segmentSubSampleShift.setInputVerifier(new DoubleInputVerifierForJTextField());

        segmentLocationX.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentLocationX.text")); // NOI18N
        segmentLocationX.setInputVerifier(new DoubleInputVerifierForJTextField());

        segmentLocationY.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentLocationY.text")); // NOI18N
        segmentLocationY.setInputVerifier(new DoubleInputVerifierForJTextField());

        segmentLocationZ.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentLocationZ.text")); // NOI18N
        segmentLocationZ.setInputVerifier(new DoubleInputVerifierForJTextField());

        segmentLocationUser.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentLocationUser.text")); // NOI18N
        segmentLocationUser.setInputVerifier(new DoubleInputVerifierForJTextField());

        segmentHighFreqCorner.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentHighFreqCorner.text")); // NOI18N
        segmentHighFreqCorner.setInputVerifier(new DoubleInputVerifierForJTextField());

        segmentHighFreqOrder.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentHighFreqOrder.text")); // NOI18N
        segmentHighFreqOrder.setInputVerifier(new UnsignedIntegerInputVerifierForJTextField());

        segmentHighFilterType.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentHighFilterType.text")); // NOI18N

        segmentLowFreqCorner.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentLowFreqCorner.text")); // NOI18N
        segmentLowFreqCorner.setInputVerifier(new DoubleInputVerifierForJTextField());

        segmentLowFreqOrder.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentLowFreqOrder.text")); // NOI18N
        segmentLowFreqOrder.setInputVerifier(new UnsignedIntegerInputVerifierForJTextField());

        segmentLowFilterType.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentLowFilterType.text")); // NOI18N

        segmentProbeInfo.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.segmentProbeInfo.text")); // NOI18N

        javax.swing.GroupLayout segmentPanelLayout = new javax.swing.GroupLayout(segmentPanel);
        segmentPanel.setLayout(segmentPanelLayout);
        segmentPanelLayout.setHorizontalGroup(
            segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(segmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29)
                    .addComponent(jLabel30)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32)
                    .addComponent(jLabel33)
                    .addComponent(jLabel34)
                    .addComponent(jLabel35)
                    .addComponent(jLabel36)
                    .addComponent(jLabel37)
                    .addComponent(jLabel38)
                    .addComponent(jLabel39)
                    .addComponent(jLabel40)
                    .addComponent(jLabel41)
                    .addComponent(jLabel42)
                    .addComponent(jLabel43))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(segmentProbeInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentLowFilterType, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentLowFreqOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentLowFreqCorner, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentHighFilterType, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentHighFreqOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentLocationUser, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentLocationZ, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentLocationY, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentLocationX, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentSubSampleShift, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentResolution, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentMaxVal, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentMinVal, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentUnit, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentSampleRate, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentSourceFile, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentChannelType, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentChannelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                    .addComponent(segmentHighFreqCorner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                .addContainerGap())
        );
        segmentPanelLayout.setVerticalGroup(
            segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(segmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(segmentChannelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(segmentChannelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(segmentSourceFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(segmentSampleRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(segmentUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(segmentMinVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(segmentMaxVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(segmentResolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(segmentSubSampleShift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(segmentLocationX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(segmentLocationY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(segmentLocationZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(segmentLocationUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(segmentHighFreqCorner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(segmentHighFreqOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(segmentHighFilterType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(segmentLowFreqCorner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(segmentLowFreqOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(segmentLowFilterType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(segmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(segmentProbeInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(segmentPanel, "card4");

        jLabel44.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel44.text")); // NOI18N

        jLabel45.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel45.text")); // NOI18N

        jLabel46.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel46.text")); // NOI18N

        jLabel47.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel47.text")); // NOI18N

        jLabel48.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel48.text")); // NOI18N

        jLabel49.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.jLabel49.text")); // NOI18N

        neuralChannelLabel.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.neuralChannelLabel.text")); // NOI18N

        neuralChannelType.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.neuralChannelType.text")); // NOI18N
        neuralChannelType.setEnabled(false);

        neuralSourceFile.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.neuralSourceFile.text")); // NOI18N
        neuralSourceFile.setEnabled(false);

        neuralSourceEntityID.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.neuralSourceEntityID.text")); // NOI18N
        neuralSourceEntityID.setInputVerifier(new UnsignedIntegerInputVerifierForJTextField());

        neuralSourceUnitID.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.neuralSourceUnitID.text")); // NOI18N
        neuralSourceUnitID.setInputVerifier(new UnsignedIntegerInputVerifierForJTextField());

        neuralProbeInfo.setText(org.openide.util.NbBundle.getMessage(ChannelPropertyEditor.class, "ChannelPropertyEditor.neuralProbeInfo.text")); // NOI18N

        javax.swing.GroupLayout neuraleventPanelLayout = new javax.swing.GroupLayout(neuraleventPanel);
        neuraleventPanel.setLayout(neuraleventPanelLayout);
        neuraleventPanelLayout.setHorizontalGroup(
            neuraleventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(neuraleventPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(neuraleventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel44)
                    .addComponent(jLabel45)
                    .addComponent(jLabel46)
                    .addComponent(jLabel47)
                    .addComponent(jLabel48)
                    .addComponent(jLabel49))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuraleventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(neuralProbeInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                    .addComponent(neuralSourceUnitID, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                    .addComponent(neuralSourceEntityID, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                    .addComponent(neuralSourceFile, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                    .addComponent(neuralChannelType, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                    .addComponent(neuralChannelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE))
                .addContainerGap())
        );
        neuraleventPanelLayout.setVerticalGroup(
            neuraleventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(neuraleventPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(neuraleventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(neuralChannelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuraleventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(neuralChannelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuraleventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(neuralSourceFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuraleventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(neuralSourceEntityID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuraleventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(neuralSourceUnitID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(neuraleventPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel49)
                    .addComponent(neuralProbeInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(360, Short.MAX_VALUE))
        );

        jPanel1.add(neuraleventPanel, "card5");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField analogChannelLabel;
    private javax.swing.JTextField analogChannelType;
    private javax.swing.JTextField analogHighFilterType;
    private javax.swing.JTextField analogHighFreqCorner;
    private javax.swing.JTextField analogHighFreqOrder;
    private javax.swing.JTextField analogLocationUser;
    private javax.swing.JTextField analogLocationX;
    private javax.swing.JTextField analogLocationY;
    private javax.swing.JTextField analogLocationZ;
    private javax.swing.JTextField analogLowFilterType;
    private javax.swing.JTextField analogLowFreqCorner;
    private javax.swing.JTextField analogLowFreqOrder;
    private javax.swing.JTextField analogMaxVal;
    private javax.swing.JTextField analogMinVal;
    private javax.swing.JPanel analogPanel;
    private javax.swing.JTextField analogProbeInfo;
    private javax.swing.JTextField analogResolution;
    private javax.swing.JTextField analogSamplingRate;
    private javax.swing.JTextField analogSourceFile;
    private javax.swing.JTextField analogUnits;
    private javax.swing.JTextField eventCSVDesc;
    private javax.swing.JTextField eventChannelLabel;
    private javax.swing.JTextField eventChannelType;
    private javax.swing.JPanel eventPanel;
    private javax.swing.JTextField eventSourceFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField neuralChannelLabel;
    private javax.swing.JTextField neuralChannelType;
    private javax.swing.JTextField neuralProbeInfo;
    private javax.swing.JTextField neuralSourceEntityID;
    private javax.swing.JTextField neuralSourceFile;
    private javax.swing.JTextField neuralSourceUnitID;
    private javax.swing.JPanel neuraleventPanel;
    private javax.swing.JTextField segmentChannelLabel;
    private javax.swing.JTextField segmentChannelType;
    private javax.swing.JTextField segmentHighFilterType;
    private javax.swing.JTextField segmentHighFreqCorner;
    private javax.swing.JTextField segmentHighFreqOrder;
    private javax.swing.JTextField segmentLocationUser;
    private javax.swing.JTextField segmentLocationX;
    private javax.swing.JTextField segmentLocationY;
    private javax.swing.JTextField segmentLocationZ;
    private javax.swing.JTextField segmentLowFilterType;
    private javax.swing.JTextField segmentLowFreqCorner;
    private javax.swing.JTextField segmentLowFreqOrder;
    private javax.swing.JTextField segmentMaxVal;
    private javax.swing.JTextField segmentMinVal;
    private javax.swing.JPanel segmentPanel;
    private javax.swing.JTextField segmentProbeInfo;
    private javax.swing.JTextField segmentResolution;
    private javax.swing.JTextField segmentSampleRate;
    private javax.swing.JTextField segmentSourceFile;
    private javax.swing.JTextField segmentSubSampleShift;
    private javax.swing.JTextField segmentUnit;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {

        if (dialogDescriptor.getValue() == DialogDescriptor.OK_OPTION) {
            // OK : overwrite the channel.
            // 1. save modified channel information.
            // 2. update channel.            

            // 1. save the channel.
            if (!saveChannel()) {
                JOptionPane.showConfirmDialog(null, "Save Error!", "Save Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // 2. update channel header.
            Workspace.updateChannelHeader(oldChannel, channel);
        }

    }

    private void beforeInitComponents(Channel channel) {
        // Set Data.
        this.oldChannel = channel;
        this.channel = channel;
    }

    private void afterInitComponents() {
        layout = (CardLayout) jPanel1.getLayout();

        // Display Base Header.
        dialogDescriptor = new DialogDescriptor(this, "Channel Editor", true, this);

        // Display Other Header.
        if (channel.getChannelType().equals(ChannelType.TS_AND_LABEL)) {
            // Event Entity Header.
            EventInfo ei = (EventInfo) (channel.getEntity());

            layout.show(jPanel1, "card2");
            eventChannelLabel.setText(channel.getLabel());
            eventChannelType.setText(channel.getChannelType().toString());
            eventSourceFile.setText(channel.getSourceFilePath());
            eventCSVDesc.setText(ei.getCsvDesc());

        }
        if (channel.getChannelType().equals(ChannelType.TS_AND_VAL)) {
            // Analog Entity Header.
            AnalogInfo ai = (AnalogInfo) (channel.getEntity());

            layout.show(jPanel1, "card3");
            analogChannelLabel.setText(channel.getLabel());
            analogChannelType.setText(channel.getChannelType().toString());
            analogSourceFile.setText(channel.getSourceFilePath());
            analogSamplingRate.setText(((Double) ai.getSampleRate()).toString());
            analogMinVal.setText(((Double) ai.getMinVal()).toString());
            analogMaxVal.setText(((Double) ai.getMaxVal()).toString());
            analogUnits.setText(ai.getUnits());
            analogResolution.setText(((Double) ai.getResolution()).toString());
            analogLocationX.setText(((Double) ai.getLocationX()).toString());
            analogLocationY.setText(((Double) ai.getLocationY()).toString());
            analogLocationZ.setText(((Double) ai.getLocationZ()).toString());
            analogLocationUser.setText(((Double) ai.getLocationUser()).toString());
            analogHighFreqCorner.setText(((Double) ai.getHighFreqCorner()).toString());
            analogHighFreqOrder.setText(((Long) ai.getHighFreqOrder()).toString());
            analogHighFilterType.setText(ai.getHighFilterType());
            analogLowFreqCorner.setText(((Double) ai.getLowFreqCorner()).toString());
            analogLowFreqOrder.setText(((Long) ai.getLowFreqOrder()).toString());
            analogLowFilterType.setText(ai.getLowFilterType());
            analogProbeInfo.setText(ai.getProbeInfo());

        }
        if (channel.getChannelType().equals(ChannelType.TS_AND_VAL_AND_ID)) {
            // Segment Entity Header.
            SegmentInfo si = (SegmentInfo) (channel.getEntity());
            SegmentSourceInfo ssi = si.getSegSourceInfos().get(0);

            layout.show(jPanel1, "card4");
            segmentChannelLabel.setText(channel.getLabel());
            segmentChannelType.setText(channel.getChannelType().toString());
            segmentSourceFile.setText(channel.getSourceFilePath());
            segmentSampleRate.setText(((Double) si.getSampleRate()).toString());
            segmentUnit.setText(si.getUnits());
            segmentMinVal.setText(((Double) ssi.getMinVal()).toString());
            segmentMaxVal.setText(((Double) ssi.getMaxVal()).toString());
            segmentResolution.setText(((Double) ssi.getResolution()).toString());
            segmentSubSampleShift.setText(((Double) ssi.getSubSampleShift()).toString());
            segmentLocationX.setText(((Double) ssi.getLocationX()).toString());
            segmentLocationY.setText(((Double) ssi.getLocationY()).toString());
            segmentLocationZ.setText(((Double) ssi.getLocationZ()).toString());
            segmentLocationUser.setText(((Double) ssi.getLocationUser()).toString());
            segmentHighFreqCorner.setText(((Double) ssi.getHighFreqCorner()).toString());
            segmentHighFreqOrder.setText(((Long) ssi.getHighFreqOrder()).toString());
            segmentHighFilterType.setText(ssi.getHighFilterType());
            segmentLowFreqCorner.setText(((Double) ssi.getLowFreqCorner()).toString());
            segmentLowFreqOrder.setText(((Long) ssi.getLowFreqOrder()).toString());
            segmentLowFilterType.setText(ssi.getLowFilterType());
            segmentProbeInfo.setText(ssi.getProbeInfo());

        }
        if (channel.getChannelType().equals(ChannelType.TIMESTAMP)) {
            // Neural Event Entity Header.
            NeuralInfo ni = (NeuralInfo) (channel.getEntity());

            layout.show(jPanel1, "card5");
            neuralChannelLabel.setText(channel.getLabel());
            neuralChannelType.setText(channel.getChannelType().toString());
            neuralSourceFile.setText(channel.getSourceFilePath());
            neuralSourceEntityID.setText(((Long) ni.getSourceEntityID()).toString());
            neuralSourceUnitID.setText(((Long) ni.getSourceUnitID()).toString());
            neuralProbeInfo.setText(ni.getProbeInfo());

        }

    }

    public void showDialog() {
        this.dialog = DialogDisplayer.getDefault().createDialog(this.dialogDescriptor);
        this.dialog.setModal(true);
        this.dialog.pack();
        this.dialog.setVisible(true);
    }

    private boolean saveChannel() {

        // cheker is needed to verify input.
        boolean checker = true;
        if (this.channel.getChannelType() == ChannelType.TS_AND_LABEL) {
            // EVENT Entity.

            // Check Values.
            // Nothing.

            // Set Values.
            this.channel.setLabel(eventChannelLabel.getText());

            Entity edittedEntity = this.channel.getEntity();
            EntityInfo ei = edittedEntity.getEntityInfo();
            ei.setEntityLabel(eventChannelLabel.getText());
            edittedEntity.setEntityInfo(ei);

            EventInfo evi = (EventInfo) edittedEntity;
            evi.setCsvDesc(eventCSVDesc.getText());

            this.channel.setEntity((Entity) evi);

        } else if (this.channel.getChannelType() == ChannelType.TS_AND_VAL) {
            // ANALOG Entity.

            // Check Values.
            checker &= isDouble(analogSamplingRate.getText());
            checker &= isDouble(analogMinVal.getText());
            checker &= isDouble(analogMaxVal.getText());
            checker &= isDouble(analogResolution.getText());
            checker &= isDouble(analogLocationX.getText());
            checker &= isDouble(analogLocationY.getText());
            checker &= isDouble(analogLocationZ.getText());
            checker &= isDouble(analogLocationUser.getText());
            checker &= isDouble(analogHighFreqCorner.getText());
            checker &= isUnsignedInteger(analogHighFreqOrder.getText());
            checker &= isDouble(analogLowFreqCorner.getText());
            checker &= isUnsignedInteger(analogLowFreqOrder.getText());
            if (!checker) {
                return checker;
            }

            // Set Values.
            this.channel.setLabel(analogChannelLabel.getText());

            Entity edittedEntity = this.channel.getEntity();
            EntityInfo ei = edittedEntity.getEntityInfo();
            ei.setEntityLabel(analogChannelLabel.getText());
            edittedEntity.setEntityInfo(ei);

            AnalogInfo ai = (AnalogInfo) edittedEntity;
            ai.setSampleRate(Double.parseDouble(analogSamplingRate.getText()));
            ai.setMinVal(Double.parseDouble(analogMinVal.getText()));
            ai.setMaxVal(Double.parseDouble(analogMaxVal.getText()));
            ai.setUnits(analogUnits.getText());
            ai.setResolution(Double.parseDouble(analogResolution.getText()));
            ai.setLocationX(Double.parseDouble(analogLocationX.getText()));
            ai.setLocationY(Double.parseDouble(analogLocationY.getText()));
            ai.setLocationZ(Double.parseDouble(analogLocationZ.getText()));
            ai.setLocationUser(Double.parseDouble(analogLocationUser.getText()));
            ai.setHighFreqCorner(Double.parseDouble(analogHighFreqCorner.getText()));
            ai.setHighFreqOrder(Long.parseLong(analogHighFreqOrder.getText()));
            ai.setHighFilterType(analogHighFilterType.getText());
            ai.setLowFreqCorner(Double.parseDouble(analogLowFreqCorner.getText()));
            ai.setLowFreqOrder(Long.parseLong(analogLowFreqOrder.getText()));
            ai.setLowFilterType(analogLowFilterType.getText());
            ai.setProbeInfo(analogProbeInfo.getText());

            this.channel.setEntity((Entity) ai);

        } else if (this.channel.getChannelType() == ChannelType.TS_AND_VAL_AND_ID) {
            // SEGMENT Entity.

            // Check Values.
            checker &= isDouble(segmentSampleRate.getText());
            checker &= isDouble(segmentMinVal.getText());
            checker &= isDouble(segmentMaxVal.getText());
            checker &= isDouble(segmentResolution.getText());
            checker &= isDouble(segmentSubSampleShift.getText());
            checker &= isDouble(segmentLocationX.getText());
            checker &= isDouble(segmentLocationY.getText());
            checker &= isDouble(segmentLocationZ.getText());
            checker &= isDouble(segmentLocationUser.getText());
            checker &= isDouble(segmentHighFreqCorner.getText());
            checker &= isUnsignedInteger(segmentHighFreqOrder.getText());
            checker &= isDouble(segmentLowFreqCorner.getText());
            checker &= isUnsignedInteger(segmentLowFreqOrder.getText());
            if (!checker) {
                return checker;
            }

            // Set Values.
            this.channel.setLabel(segmentChannelLabel.getText());

            Entity edittedEntity = this.channel.getEntity();
            EntityInfo ei = edittedEntity.getEntityInfo();
            ei.setEntityLabel(segmentChannelLabel.getText());
            edittedEntity.setEntityInfo(ei);

            SegmentInfo si = (SegmentInfo) edittedEntity;
            si.setSampleRate(Double.parseDouble(segmentSampleRate.getText()));
            si.setUnits(segmentUnit.getText());
            ArrayList<SegmentSourceInfo> alssi = si.getSegSourceInfos();
            SegmentSourceInfo ssi = alssi.get(0);
            ssi.setMinVal(Double.parseDouble(segmentMinVal.getText()));
            ssi.setMaxVal(Double.parseDouble(segmentMaxVal.getText()));
            ssi.setResolution(Double.parseDouble(segmentResolution.getText()));
            ssi.setSubSampleShift(Double.parseDouble(segmentSubSampleShift.getText()));
            ssi.setLocationX(Double.parseDouble(segmentLocationX.getText()));
            ssi.setLocationY(Double.parseDouble(segmentLocationY.getText()));
            ssi.setLocationZ(Double.parseDouble(segmentLocationZ.getText()));
            ssi.setLocationUser(Double.parseDouble(segmentLocationUser.getText()));
            ssi.setHighFreqCorner(Double.parseDouble(segmentHighFreqCorner.getText()));
            ssi.setHighFreqOrder(Long.parseLong(segmentHighFreqOrder.getText()));
            ssi.setHighFilterType(segmentHighFilterType.getText());
            ssi.setLowFreqCorner(Double.parseDouble(segmentLowFreqCorner.getText()));
            ssi.setLowFreqOrder(Long.parseLong(segmentLowFreqOrder.getText()));
            ssi.setLowFilterType(segmentLowFilterType.getText());
            ssi.setProbeInfo(segmentProbeInfo.getText());
            alssi.set(0, ssi);
            si.setSegSourceInfos(alssi);

            this.channel.setEntity((Entity) si);

        } else if (this.channel.getChannelType() == ChannelType.TIMESTAMP) {
            // NEURALEVENT Entity.

            // Check Values.
            checker &= isUnsignedInteger(neuralSourceEntityID.getText());
            checker &= isUnsignedInteger(neuralSourceUnitID.getText());
            if (!checker) {
                return checker;
            }

            // Set Values.
            this.channel.setLabel(neuralChannelLabel.getText());

            Entity edittedEntity = this.channel.getEntity();
            EntityInfo ei = edittedEntity.getEntityInfo();
            ei.setEntityLabel(neuralChannelLabel.getText());
            edittedEntity.setEntityInfo(ei);

            NeuralInfo ni = (NeuralInfo) edittedEntity;
            ni.setSourceEntityID(Long.parseLong(neuralSourceEntityID.getText()));
            ni.setSourceUnitID(Long.parseLong(neuralSourceUnitID.getText()));
            ni.setProbeInfo(neuralProbeInfo.getText());

            this.channel.setEntity((Entity) ni);

        } else {
            // UNKNOWN
            checker = false;
        }

        return checker;
    }

    private boolean isDouble(String txt) {
        try {
            Double.parseDouble(txt);
        } catch (NumberFormatException numberFormatException) {
            return false;
        }
        return true;
    }

    private boolean isInteger(String txt) {
        try {
            Integer.parseInt(txt);
        } catch (NumberFormatException numberFormatException) {
            return false;
        }
        return true;
    }

    private boolean isUnsignedInteger(String txt) {
        try {
            int value = Integer.parseInt(txt);
            if (value < 0) {
                return false;
            }
        } catch (NumberFormatException numberFormatException) {
            return false;
        }
        return true;
    }
}
