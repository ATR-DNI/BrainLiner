/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jp.atr.dni.bmi.desktop.preprocessing;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import jp.atr.dni.bmi.desktop.model.api.Channel;
import jp.atr.dni.bmi.desktop.model.api.ChannelType;
import jp.atr.dni.bmi.desktop.model.api.Workspace;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//jp.atr.dni.bmi.desktop.preprocessing//Preprocessing//EN",
autostore = false)
@TopComponent.Description(preferredID = "PreprocessingTopComponent",
iconBase = "jp/atr/dni/bmi/desktop/preprocessing/monitor16.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "jp.atr.dni.bmi.desktop.preprocessing.PreprocessingTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_PreprocessingAction",
preferredID = "PreprocessingTopComponent")
public final class PreprocessingTopComponent extends TopComponent implements PropertyChangeListener {

    // Define Table's model.
    private DefaultTableModel defaultTableModel1;
    private Workspace workspace;

    public PreprocessingTopComponent() {
        if (workspace == null) {
            workspace = Lookup.getDefault().lookup(Workspace.class);
        }

        beforeInitComponents();
        initComponents();
        afterInitComponents();

        setName(NbBundle.getMessage(PreprocessingTopComponent.class, "CTL_PreprocessingTopComponent"));
        setToolTipText(NbBundle.getMessage(PreprocessingTopComponent.class, "HINT_PreprocessingTopComponent"));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel4 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTabbedPane1.setName(""); // NOI18N

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jTable1.setModel(defaultTableModel1);
        jTable1.setAutoCreateRowSorter(true);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 372;
        gridBagConstraints.ipady = 268;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 9.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(PreprocessingTopComponent.class, "PreprocessingTopComponent.jButton1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jButton1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(PreprocessingTopComponent.class, "PreprocessingTopComponent.jButton2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 191;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel3, gridBagConstraints);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(PreprocessingTopComponent.class, "PreprocessingTopComponent.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 442, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 416, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // Add listener to the workspace to call propertyChange.
        workspace.addPropertyChangeListener(this);

        // Initialize jTables.
        afterInitComponents();
    }

    @Override
    public void componentClosed() {
        // Remove listener from the workspace not to call propertyChange.
        workspace.removePropertyChangeListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void propertyChange(PropertyChangeEvent pce) {
      // Refresh components.

      // jTable1
      this.repaintJTable1();

    }

    // Initialize components.
    private void beforeInitComponents() {
// Set jTable model
        Vector tableColumns = new Vector();
        tableColumns.add("Checked");
        tableColumns.add("Name");
        tableColumns.add("Type");
        tableColumns.add("File");

        defaultTableModel1 = new DefaultTableModel(tableColumns, 0) {
            //Set all cell uneditable.

            @Override
            public boolean isCellEditable(int i, int j) {
                return false;
            }
        };
    }

    // Initialize components.
    private void afterInitComponents() {

        // Repaint jTable1.
        this.repaintJTable1();

    }
    // Repaint jTable1.

    private void repaintJTable1() {
// Repaint jTable1.
        // 1. Remove all rows from jTable1.
        // 1. [for jTable1]
        defaultTableModel1.setRowCount(0);

        // 2. Recreate rows to jTable1.
        // 2. [for jTable1]
        for (int i = 0; i < workspace.numChannels(); i++) {
            this.addNeuralDataRow(workspace.getChannel(i));
        }
    }

    // Add Channel data to jTable1.
    private void addNeuralDataRow(Channel channel) {
        ChannelType type = channel.getType();
        String sourceFilePath = channel.getURI();
        if (sourceFilePath != null) {
            int lengthPlusOne = sourceFilePath.length() + 1;
            int forwardSlashNDX = sourceFilePath.lastIndexOf('/');
            if (forwardSlashNDX > 0 && forwardSlashNDX < lengthPlusOne) {
                sourceFilePath = sourceFilePath.substring(forwardSlashNDX + 1);
            } else {
                int backwardSlashNDX = sourceFilePath.lastIndexOf('\\');
                if (backwardSlashNDX > 0 && backwardSlashNDX < lengthPlusOne) {
                    sourceFilePath = sourceFilePath.substring(backwardSlashNDX + 1);
                }
            }
        }

        Vector newRow = new Vector();
        newRow.add("");
        newRow.add(channel);
        newRow.add(type);
        newRow.add(sourceFilePath);

        defaultTableModel1.addRow(newRow);
    }
}
